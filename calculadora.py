import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import math
import statistics
import sympy as sp
import json
import pandas as pd
from datetime import datetime
from matplotlib.patches import Rectangle

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Calculadora Cient√≠fica Avanzada",
    page_icon="üßÆ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #FF6B9D;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.8rem;
        color: #FF9EC0;
        margin-bottom: 1rem;
        font-weight: bold;
    }
    .calc-button {
        height: 70px;
        border-radius: 15px;
        font-size: 1.5rem;
        font-weight: bold;
        margin: 5px 0;
        background-color: #FFD1DC;
        color: #D94A7A;
        border: 2px solid #FF9EC0;
    }
    .calc-button:hover {
        background-color: #FF9EC0;
        color: white;
    }
    .result-display {
        background-color: #FFF5F7;
        border: 2px solid #FFD1DC;
        border-radius: 10px;
        padding: 15px;
        font-size: 1.5rem;
        color: #D94A7A;
        margin-bottom: 15px;
        min-height: 80px;
    }
    .history-item {
        background-color: #FFF5F7;
        border-left: 5px solid #FF9EC0;
        padding: 10px;
        margin: 5px 0;
        border-radius: 5px;
    }
    .stButton>button {
        width: 100%;
        height: 70px;
        border-radius: 15px;
        font-size: 1.5rem;
        font-weight: bold;
        background-color: #FFD1DC;
        color: #D94A7A;
        border: 2px solid #FF9EC0;
    }
    .stButton>button:hover {
        background-color: #FF9EC0;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# Inicializaci√≥n del estado de la sesi√≥n
if 'current_expression' not in st.session_state:
    st.session_state.current_expression = "0"
if 'history' not in st.session_state:
    st.session_state.history = []
if 'precision' not in st.session_state:
    st.session_state.precision = 10

# Funciones de la calculadora
def add_to_expression(value):
    """A√±ade un valor a la expresi√≥n actual"""
    if st.session_state.current_expression == "0" and value not in "().":
        st.session_state.current_expression = value
    else:
        st.session_state.current_expression += value

def clear_expression():
    """Limpia la expresi√≥n actual"""
    st.session_state.current_expression = "0"

def calculate_result():
    """Calcula el resultado de la expresi√≥n actual"""
    try:
        expression = st.session_state.current_expression
        
        # Preparar el entorno de evaluaci√≥n seguro
        safe_dict = {
            "__builtins__": {},
            "abs": abs, "round": round, "min": min, "max": max,
            "sin": math.sin, "cos": math.cos, "tan": math.tan,
            "asin": math.asin, "acos": math.acos, "atan": math.atan,
            "log": math.log, "log10": math.log10, "log2": math.log2,
            "exp": math.exp, "sqrt": math.sqrt, "cbrt": lambda x: x**(1/3),
            "pi": math.pi, "e": math.e, "factorial": math.factorial
        }
        
        # Procesar factoriales
        if '!' in expression:
            import re
            pattern = r'(\d+)!'
            expression = re.sub(pattern, r'factorial(\1)', expression)
        
        # Evaluar la expresi√≥n
        result = eval(expression, safe_dict)
        
        # Formatear resultado seg√∫n precisi√≥n
        if isinstance(result, float):
            result = round(result, st.session_state.precision)
        
        # A√±adir al historial
        timestamp = datetime.now().strftime("%H:%M:%S")
        st.session_state.history.insert(0, f"[{timestamp}] {st.session_state.current_expression} = {result}")
        
        # Limitar el historial a 20 entradas
        if len(st.session_state.history) > 20:
            st.session_state.history = st.session_state.history[:20]
        
        # Actualizar la expresi√≥n con el resultado
        st.session_state.current_expression = str(result)
        
    except Exception as e:
        st.error(f"Error en el c√°lculo: {str(e)}")

def toggle_sign():
    """Cambia el signo de la expresi√≥n actual"""
    current = st.session_state.current_expression
    if current.startswith('-'):
        st.session_state.current_expression = current[1:]
    else:
        st.session_state.current_expression = '-' + current

# Interfaz principal
st.markdown('<div class="main-header">üßÆ Calculadora Cient√≠fica Avanzada</div>', unsafe_allow_html=True)

# Sidebar para configuraci√≥n e historial
with st.sidebar:
    st.markdown('<div class="sub-header">‚öôÔ∏è Configuraci√≥n</div>', unsafe_allow_html=True)
    
    # Precisi√≥n decimal
    st.session_state.precision = st.slider("Precisi√≥n decimal", min_value=2, max_value=15, value=st.session_state.precision)
    
    # Exportar historial
    if st.button("üì§ Exportar Historial"):
        if st.session_state.history:
            history_text = "=== HISTORIAL DE CALCULADORA AVANZADA ===\n\n"
            for entry in st.session_state.history:
                history_text += entry + "\n"
            
            st.download_button(
                label="Descargar Historial",
                data=history_text,
                file_name=f"historial_calculadora_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )
        else:
            st.warning("No hay historial para exportar")
    
    # Limpiar historial
    if st.button("üóëÔ∏è Limpiar Historial"):
        st.session_state.history = []
        st.success("Historial limpiado")
    
    st.markdown('<div class="sub-header">üìö Historial</div>', unsafe_allow_html=True)
    
    # Mostrar historial
    if st.session_state.history:
        for i, entry in enumerate(st.session_state.history[:10]):
            st.markdown(f'<div class="history-item">{entry}</div>', unsafe_allow_html=True)
    else:
        st.info("No hay c√°lculos en el historial")

# Contenido principal con pesta√±as
tab1, tab2, tab3, tab4 = st.tabs(["üßÆ Calculadora", "üìä Gr√°ficos", "üìà Estad√≠sticas", "üî¨ Avanzado"])

# Pesta√±a de Calculadora
with tab1:
    st.markdown('<div class="sub-header">Calculadora Cient√≠fica</div>', unsafe_allow_html=True)
    
    # Pantalla de la calculadora
    st.markdown(f'<div class="result-display">{st.session_state.current_expression}</div>', unsafe_allow_html=True)
    
    # Botones de la calculadora
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("sin", key="sin"):
            add_to_expression("sin(")
        if st.button("cos", key="cos"):
            add_to_expression("cos(")
        if st.button("tan", key="tan"):
            add_to_expression("tan(")
        if st.button("œÄ", key="pi"):
            add_to_expression(str(math.pi))
        if st.button("7", key="7"):
            add_to_expression("7")
        if st.button("4", key="4"):
            add_to_expression("4")
        if st.button("1", key="1"):
            add_to_expression("1")
        if st.button("0", key="0"):
            add_to_expression("0")
    
    with col2:
        if st.button("asin", key="asin"):
            add_to_expression("asin(")
        if st.button("acos", key="acos"):
            add_to_expression("acos(")
        if st.button("atan", key="atan"):
            add_to_expression("atan(")
        if st.button("e", key="e"):
            add_to_expression(str(math.e))
        if st.button("8", key="8"):
            add_to_expression("8")
        if st.button("5", key="5"):
            add_to_expression("5")
        if st.button("2", key="2"):
            add_to_expression("2")
        if st.button(".", key="dot"):
            add_to_expression(".")
    
    with col3:
        if st.button("ln", key="ln"):
            add_to_expression("log(")
        if st.button("log", key="log"):
            add_to_expression("log10(")
        if st.button("e^x", key="exp"):
            add_to_expression("exp(")
        if st.button("‚àö", key="sqrt"):
            add_to_expression("sqrt(")
        if st.button("9", key="9"):
            add_to_expression("9")
        if st.button("6", key="6"):
            add_to_expression("6")
        if st.button("3", key="3"):
            add_to_expression("3")
        if st.button("¬±", key="sign"):
            toggle_sign()
    
    with col4:
        if st.button("x¬≤", key="square"):
            add_to_expression("**2")
        if st.button("x¬≥", key="cube"):
            add_to_expression("**3")
        if st.button("x^y", key="power"):
            add_to_expression("**")
        if st.button("x!", key="factorial"):
            add_to_expression("!")
        if st.button("/", key="divide"):
            add_to_expression("/")
        if st.button("*", key="multiply"):
            add_to_expression("*")
        if st.button("-", key="subtract"):
            add_to_expression("-")
        if st.button("+", key="add"):
            add_to_expression("+")
    
    with col5:
        if st.button("(", key="open_paren"):
            add_to_expression("(")
        if st.button(")", key="close_paren"):
            add_to_expression(")")
        if st.button("C", key="clear"):
            clear_expression()
        if st.button("=", key="equals"):
            calculate_result()
        if st.button("|x|", key="abs"):
            add_to_expression("abs(")
        if st.button("mod", key="mod"):
            add_to_expression("%")
        if st.button("10^x", key="10power"):
            add_to_expression("10**(")
        if st.button("2^x", key="2power"):
            add_to_expression("2**(")

# Pesta√±a de Gr√°ficos
with tab2:
    st.markdown('<div class="sub-header">Gr√°fico de Funciones</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        function_input = st.text_input("Funci√≥n f(x):", value="sin(x)", placeholder="Ej: sin(x), x**2, log(x)")
        
        col1a, col1b, col1c = st.columns(3)
        with col1a:
            x_min = st.number_input("X m√≠nimo:", value=-10.0, step=1.0)
        with col1b:
            x_max = st.number_input("X m√°ximo:", value=10.0, step=1.0)
        with col1c:
            num_points = st.number_input("N√∫mero de puntos:", value=1000, min_value=100, max_value=10000)
    
    with col2:
        st.markdown("**Opciones del gr√°fico**")
        show_grid = st.checkbox("Mostrar cuadr√≠cula", value=True)
        show_legend = st.checkbox("Mostrar leyenda", value=True)
    
    if st.button("üìà Graficar Funci√≥n"):
        try:
            # Crear array de x
            x = np.linspace(x_min, x_max, num_points)
            
            # Preparar la funci√≥n para evaluaci√≥n
            func_str = function_input.replace('sin', 'np.sin')
            func_str = func_str.replace('cos', 'np.cos')
            func_str = func_str.replace('tan', 'np.tan')
            func_str = func_str.replace('log', 'np.log')
            func_str = func_str.replace('exp', 'np.exp')
            func_str = func_str.replace('sqrt', 'np.sqrt')
            func_str = func_str.replace('pi', 'np.pi')
            func_str = func_str.replace('e', 'np.e')
            
            # Evaluar la funci√≥n
            y = eval(func_str, {"np": np, "x": x})
            
            # Crear gr√°fico con matplotlib
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(x, y, color='#FF6B9D', linewidth=2, label=f'f(x) = {function_input}')
            ax.set_xlabel('x')
            ax.set_ylabel('f(x)')
            ax.set_title(f'Gr√°fico de f(x) = {function_input}')
            
            if show_grid:
                ax.grid(True, alpha=0.3)
            if show_legend:
                ax.legend()
            
            # Estilo pastel
            ax.set_facecolor('#FFF5F7')
            fig.patch.set_facecolor('#FFF9FA')
            
            st.pyplot(fig)
            
        except Exception as e:
            st.error(f"Error al graficar: {str(e)}")

# Pesta√±a de Estad√≠sticas
with tab3:
    st.markdown('<div class="sub-header">An√°lisis Estad√≠stico</div>', unsafe_allow_html=True)
    
    # Entrada de datos
    data_input = st.text_area("Introduce los datos (separados por comas):", 
                             placeholder="Ej: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
                             height=100)
    
    if st.button("üìä Analizar Datos"):
        if data_input:
            try:
                # Procesar datos
                data = [float(x.strip()) for x in data_input.split(',') if x.strip()]
                
                if len(data) < 2:
                    st.warning("Se necesitan al menos 2 datos para el an√°lisis")
                else:
                    # Calcular estad√≠sticas
                    stats = {
                        "Cantidad de datos": len(data),
                        "Media": statistics.mean(data),
                        "Mediana": statistics.median(data),
                        "Moda": statistics.mode(data) if len(set(data)) < len(data) else "No hay moda √∫nica",
                        "Desviaci√≥n Est√°ndar": statistics.stdev(data) if len(data) > 1 else 0,
                        "Varianza": statistics.variance(data) if len(data) > 1 else 0,
                        "M√≠nimo": min(data),
                        "M√°ximo": max(data),
                        "Rango": max(data) - min(data)
                    }
                    
                    # Mostrar estad√≠sticas
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**Estad√≠sticas Descriptivas**")
                        for key, value in list(stats.items())[:5]:
                            if isinstance(value, float):
                                st.info(f"{key}: {value:.{st.session_state.precision}f}")
                            else:
                                st.info(f"{key}: {value}")
                    
                    with col2:
                        st.markdown("**Medidas de Dispersi√≥n**")
                        for key, value in list(stats.items())[5:]:
                            if isinstance(value, float):
                                st.info(f"{key}: {value:.{st.session_state.precision}f}")
                            else:
                                st.info(f"{key}: {value}")
                    
                    # Crear visualizaciones
                    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
                    
                    # Histograma
                    ax1.hist(data, bins=min(20, len(data)//2), color='#FF9EC0', alpha=0.7, edgecolor='white')
                    ax1.set_title('Histograma de Frecuencias')
                    ax1.set_xlabel('Valores')
                    ax1.set_ylabel('Frecuencia')
                    ax1.grid(True, alpha=0.3)
                    
                    # Diagrama de caja
                    ax2.boxplot(data, patch_artist=True, 
                               boxprops=dict(facecolor='#FF6B9D', color='black'),
                               medianprops=dict(color='white'))
                    ax2.set_title('Diagrama de Caja')
                    ax2.set_ylabel('Valores')
                    
                    # Estilo pastel
                    ax1.set_facecolor('#FFF5F7')
                    ax2.set_facecolor('#FFF5F7')
                    fig.patch.set_facecolor('#FFF9FA')
                    
                    st.pyplot(fig)
                    
            except Exception as e:
                st.error(f"Error en el an√°lisis: {str(e)}")
        else:
            st.warning("Por favor, introduce algunos datos para analizar")

# Pesta√±a Avanzado
with tab4:
    st.markdown('<div class="sub-header">C√°lculo Simb√≥lico y Avanzado</div>', unsafe_allow_html=True)
    
    # Derivadas
    st.markdown("**C√°lculo de Derivadas**")
    col1, col2 = st.columns([3, 1])
    with col1:
        derivative_input = st.text_input("Funci√≥n para derivar:", placeholder="x**2 + 3*x + 1")
    with col2:
        if st.button("Calcular Derivada"):
            if derivative_input:
                try:
                    x = sp.Symbol('x')
                    expr = sp.sympify(derivative_input)
                    derivative = sp.diff(expr, x)
                    st.success(f"Derivada de {expr}: {derivative}")
                    st.latex(f"\\frac{{d}}{{dx}}({sp.latex(expr)}) = {sp.latex(derivative)}")
                except Exception as e:
                    st.error(f"Error en el c√°lculo de la derivada: {str(e)}")
    
    # Integrales
    st.markdown("**C√°lculo de Integrales**")
    col1, col2 = st.columns([3, 1])
    with col1:
        integral_input = st.text_input("Funci√≥n para integrar:", placeholder="x**2")
    with col2:
        if st.button("Calcular Integral"):
            if integral_input:
                try:
                    x = sp.Symbol('x')
                    expr = sp.sympify(integral_input)
                    integral = sp.integrate(expr, x)
                    st.success(f"Integral de {expr}: {integral} + C")
                    st.latex(f"\\int ({sp.latex(expr)})  dx = {sp.latex(integral)} + C")
                except Exception as e:
                    st.error(f"Error en el c√°lculo de la integral: {str(e)}")
    
    # L√≠mites
    st.markdown("**C√°lculo de L√≠mites**")
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        limit_input = st.text_input("Funci√≥n para el l√≠mite:", placeholder="sin(x)/x")
    with col2:
        limit_point = st.text_input("x ‚Üí", placeholder="0")
    with col3:
        if st.button("Calcular L√≠mite"):
            if limit_input and limit_point:
                try:
                    x = sp.Symbol('x')
                    expr = sp.sympify(limit_input)
                    point = sp.sympify(limit_point)
                    limit = sp.limit(expr, x, point)
                    st.success(f"L√≠mite de {expr} cuando x ‚Üí {point}: {limit}")
                    st.latex(f"\\lim_{{x \\to {sp.latex(point)}}} ({sp.latex(expr)}) = {sp.latex(limit)}")
                except Exception as e:
                    st.error(f"Error en el c√°lculo del l√≠mite: {str(e)}")

# Informaci√≥n de la aplicaci√≥n
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #FF6B9D;">
    <p>Calculadora Cient√≠fica Avanzada - Desarrollada con Streamlit</p>
    <p>¬© 2023 - Todos los derechos reservados</p>
</div>
""", unsafe_allow_html=True)